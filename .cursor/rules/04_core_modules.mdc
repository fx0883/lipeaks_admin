---
description:
globs:
alwaysApply: false
---
# pure-admin-thin-i18n 核心模块详解

## 1. 用户认证与权限管理

### 1.1 用户认证

用户认证模块负责处理用户登录、登出和 Token 管理：

- **核心文件**：
  - `src/api/user.ts`：用户认证相关 API
  - `src/store/modules/user.ts`：用户状态管理
  - `src/utils/auth.ts`：认证工具函数
  - `src/views/login/index.vue`：登录页面

- **认证流程**：
  1. 用户在登录页面输入凭证
  2. 调用登录 API 获取 Token
  3. 将 Token 存储到 localStorage 和 Cookie
  4. 获取用户信息和权限
  5. 生成动态路由
  6. 跳转到首页或目标页面

- **Token 管理**：
  - 使用 `access_token` 和 `refresh_token` 机制
  - Token 过期自动刷新
  - 请求失败后自动重试
  - 多 Tab 页面同步登录状态

### 1.2 权限控制

权限控制系统实现了基于角色和权限点的多级权限控制：

- **核心文件**：
  - `src/store/modules/permission.ts`：权限状态管理
  - `src/components/ReAuth`：基于角色的权限组件
  - `src/components/RePerms`：基于权限点的权限组件
  - `src/directives/auth`：权限指令
  - `src/directives/perms`：权限点指令

- **权限级别**：
  - 路由级权限：控制页面访问
  - 组件级权限：控制组件显示
  - 按钮级权限：控制操作权限

- **权限使用示例**：
  ```vue
  <!-- 基于角色控制 -->
  <Auth :value="['admin']">
    <el-button>管理员可见按钮</el-button>
  </Auth>

  <!-- 基于权限点控制 -->
  <Perms :value="['user:create']">
    <el-button>有创建用户权限可见</el-button>
  </Perms>

  <!-- 使用指令控制 -->
  <el-button v-auth="['admin']">管理员可见按钮</el-button>
  <el-button v-perms="['user:create']">有创建用户权限可见</el-button>
  ```

## 2. 路由与导航管理

### 2.1 路由系统

路由系统实现了动态路由生成和权限控制：

- **核心文件**：
  - `src/router/index.ts`：路由主配置
  - `src/router/modules/`：路由模块
  - `src/router/utils.ts`：路由工具函数

- **路由类型**：
  - 静态路由：不需要权限的路由，如登录页
  - 动态路由：根据用户权限动态加载的路由
  - 错误页路由：404、403 等错误页面

- **路由元信息**：
  ```typescript
  {
    path: "/example",
    name: "Example",
    component: () => import("@/layout/index.vue"),
    meta: {
      title: "exampleSystem",  // i18n key
      icon: "menu",            // 图标
      rank: 7,                 // 排序
      roles: ["admin"],        // 角色权限
      auths: ["user:view"],    // 权限点
      keepAlive: true          // 是否缓存
    },
    children: [/* 子路由 */]
  }
  ```

### 2.2 导航菜单

导航菜单根据路由配置自动生成：

- **核心文件**：
  - `src/layout/components/lay-sidebar`：侧边栏导航
  - `src/layout/components/lay-navbar`：顶部导航

- **菜单特性**：
  - 支持多级菜单
  - 根据路由元信息生成
  - 支持国际化
  - 支持图标
  - 支持权限控制

### 2.3 多标签页

多标签页系统实现了类似浏览器的标签页导航：

- **核心文件**：
  - `src/layout/components/lay-tag`：标签页组件
  - `src/store/modules/multiTags.ts`：标签页状态管理

- **标签页功能**：
  - 自动记录访问的页面
  - 支持关闭、刷新、关闭其他等操作
  - 支持拖拽排序
  - 支持右键菜单
  - 支持缓存页面状态

## 3. 国际化系统

### 3.1 国际化架构

国际化系统基于 Vue I18n 实现：

- **核心文件**：
  - `src/plugins/i18n.ts`：国际化插件配置
  - `locales/zh-CN.yaml`：中文翻译
  - `locales/en.yaml`：英文翻译
  - `src/store/modules/app.ts`：语言设置状态管理

- **国际化特性**：
  - 支持多语言切换
  - 自动检测浏览器语言
  - 记住用户语言偏好
  - 与 Element Plus 国际化集成

### 3.2 国际化使用

在组件中使用国际化：

```vue
<template>
  <!-- 使用 t 函数 -->
  <div>{{ t("common.welcome") }}</div>
  
  <!-- 在属性中使用 -->
  <el-button :title="t('common.save')">{{ t("common.save") }}</el-button>
  
  <!-- 处理带参数的翻译 -->
  <div>{{ t("common.hello", { name: username }) }}</div>
</template>

<script setup lang="ts">
import { useI18n } from "vue-i18n";

// 获取 i18n 实例
const { t, locale } = useI18n();

// 切换语言
const changeLanguage = (lang: string) => {
  locale.value = lang;
};
</script>
```

### 3.3 翻译文件结构

翻译文件使用 YAML 格式组织，结构清晰：

```yaml
# locales/zh-CN.yaml
common:
  save: 保存
  cancel: 取消
  confirm: 确认
  delete: 删除
  
login:
  title: 登录
  username: 用户名
  password: 密码
  remember: 记住我
  
# 嵌套结构
settings:
  system:
    title: 系统设置
    theme: 主题
    language: 语言
```

## 4. HTTP 请求与 API 管理

### 4.1 HTTP 客户端

HTTP 客户端基于 Axios 封装，实现了统一的请求处理：

- **核心文件**：
  - `src/utils/http/index.ts`：HTTP 客户端封装
  - `src/utils/http/types.d.ts`：HTTP 类型定义
  - `src/types/api.ts`：API 通用类型定义

- **核心功能**：
  - 请求拦截器：添加 Token、CSRF 等
  - 响应拦截器：统一处理响应格式
  - 错误处理：统一处理错误响应
  - Token 刷新：自动刷新过期 Token
  - 请求重试：Token 刷新后自动重试请求
  - 取消请求：支持取消重复请求

### 4.2 API 模块化

API 接口按功能模块组织：

- **核心文件**：
  - `src/api/modules/`：按模块划分的 API 接口
  - `src/api/user.ts`：用户认证相关 API
  - `src/api/routes.ts`：路由相关 API

- **API 使用示例**：
```typescript
// 用户登录
import { useUserStoreHook } from "@/store/modules/user";

const userStore = useUserStoreHook();
const { username, password } = formData;
await userStore.loginApi({ username, password });

// 获取列表数据
import { getAdminUserList } from "@/api/modules/adminUser";

const { data } = await getAdminUserList({ page: 1, limit: 10 });
```

### 4.3 API 响应格式

统一的 API 响应格式：

```typescript
// API 响应基础接口
export interface ApiResponse<T = any> {
  success: boolean;      // 请求是否成功
  code: number;          // 状态码
  message: string;       // 消息
  data: T;               // 响应数据
}

// 分页数据格式
export interface PaginationData<T = any> {
  total: number;         // 总条数
  page: number;          // 当前页码
  limit: number;         // 每页条数
  data: T[];             // 数据列表
}
```

## 5. 组件系统

### 5.1 基础组件

以 `Re` 前缀命名的基础组件：

- **ReAuth**：权限控制组件
- **ReDialog**：对话框组件
- **ReIcon**：图标组件
- **RePerms**：权限点组件
- **RePureTableBar**：表格工具栏组件
- **ReSegmented**：分段控制组件
- **ReText**：文本组件

### 5.2 业务组件

按业务功能组织的组件：

- **AdminUserManagement**：管理员用户管理组件
- **Cms**：内容管理系统组件
- **Dashboard**：仪表盘组件
- **MenuManagement**：菜单管理组件
- **TenantManagement**：租户管理组件

### 5.3 布局组件

负责整体页面结构的组件：

- **lay-sidebar**：侧边栏导航
- **lay-navbar**：顶部导航栏
- **lay-tag**：标签页导航
- **lay-content**：内容区域
- **lay-footer**：页脚
- **lay-setting**：设置面板

## 6. 状态管理

### 6.1 状态模块

使用 Pinia 进行状态管理，按功能模块组织：

- **app.ts**：应用全局状态，如语言设置、布局模式等
- **user.ts**：用户状态，如用户信息、Token 等
- **permission.ts**：权限状态，如可访问路由等
- **multiTags.ts**：多标签页状态
- **epTheme.ts**：主题状态
- **adminUser.ts**：管理员用户状态
- **cms.ts**：CMS 模块状态
- **tenant.ts**：租户管理状态

### 6.2 状态使用

在组件中使用状态：

```typescript
// 使用 user store
import { useUserStoreHook } from "@/store/modules/user";

const userStore = useUserStoreHook();
const { username, roles } = storeToRefs(userStore);

// 调用 action
await userStore.logout();

// 使用 app store
import { useAppStoreHook } from "@/store/modules/app";

const appStore = useAppStoreHook();
const { language, layout } = storeToRefs(appStore);

// 修改状态
appStore.setLanguage("en");
```

### 6.3 状态持久化

使用 `responsive-storage` 实现状态持久化：

```typescript
// 定义持久化配置
const storage = responsive({
  namespace: "pure-admin",
  props: {
    layout: {
      type: String,
      default: "vertical"
    },
    theme: {
      type: String,
      default: "light"
    },
    language: {
      type: String,
      default: "zh-CN"
    }
  }
});

// 在 store 中使用
export const useAppStore = defineStore({
  id: "pure-app",
  state: () => ({
    layout: storage.layout,
    theme: storage.theme,
    language: storage.language
  }),
  actions: {
    setLayout(layout: string) {
      this.layout = layout;
      storage.layout = layout;
    }
  }
});
```
