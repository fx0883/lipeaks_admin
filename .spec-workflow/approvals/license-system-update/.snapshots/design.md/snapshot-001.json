{
  "id": "snapshot_1758870885290_i4l3945th",
  "approvalId": "approval_1758870885285_iqzq1nrru",
  "approvalTitle": "许可证系统方案A重构更新设计文档",
  "version": 1,
  "timestamp": "2025-09-26T07:14:45.290Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# 许可证系统方案A重构更新 - 设计文档\n\n## 📋 设计概述\n\n### 架构设计理念\n基于现有的多租户Django架构，采用分层设计模式实现许可证系统的渐进式重构。设计遵循SOLID原则，确保系统的可扩展性、可维护性和向后兼容性。\n\n### 核心设计目标\n- **语义明确性**: 通过字段重命名明确区分模板配置与实际使用值\n- **跨平台兼容**: 实现macOS（Intel + Apple Silicon）完整支持\n- **安全增强**: 强化RSA签名验证和异常检测机制\n- **用户体验**: 保证前端界面的流畅性和一致性\n\n## 🏗️ 系统架构设计\n\n### 整体架构图\n```mermaid\ngraph TB\n    subgraph \"前端层\"\n        A[Vue.js管理界面] --> B[TypeScript类型层]\n        B --> C[API调用层]\n    end\n    \n    subgraph \"API网关层\"\n        D[Django REST Framework] --> E[认证中间件]\n        E --> F[权限控制中间件]\n        F --> G[API版本控制]\n    end\n    \n    subgraph \"业务服务层\"\n        H[LicensePlan服务] --> I[许可证激活服务]\n        I --> J[硬件指纹服务]\n        J --> K[安全验证服务]\n    end\n    \n    subgraph \"数据访问层\"\n        L[Django ORM] --> M[数据库迁移层]\n        M --> N[缓存层 Redis]\n    end\n    \n    subgraph \"数据存储层\"\n        O[(MySQL数据库)] --> P[备份与恢复]\n    end\n    \n    C --> D\n    G --> H\n    K --> L\n    N --> O\n```\n\n### 模块依赖关系\n```mermaid\ngraph LR\n    subgraph \"核心模块\"\n        A[licenses.models] --> B[licenses.serializers]\n        B --> C[licenses.views]\n        C --> D[licenses.services]\n    end\n    \n    subgraph \"支持模块\"\n        E[licenses.utils] --> F[licenses.middleware]\n        F --> G[licenses.validators]\n    end\n    \n    subgraph \"集成模块\"\n        H[authentication] --> I[permissions]\n        I --> J[multi_tenant]\n    end\n    \n    D --> E\n    C --> H\n```\n\n## 🔄 数据模型设计\n\n### LicensePlan模型重构\n```python\nclass LicensePlan(BaseModel):\n    \"\"\"许可证方案模型 - 重构后\"\"\"\n    \n    # 基础信息（无变更）\n    name = models.CharField(max_length=100, verbose_name=\"方案名称\")\n    code = models.CharField(max_length=50, unique=True, verbose_name=\"方案代码\")\n    plan_type = models.CharField(max_length=20, choices=PLAN_TYPE_CHOICES)\n    \n    # 重构字段（语义化命名）\n    default_max_activations = models.PositiveIntegerField(\n        verbose_name=\"默认最大激活数\",\n        help_text=\"该方案的模板默认最大激活设备数\"\n    )\n    default_validity_days = models.PositiveIntegerField(\n        verbose_name=\"默认有效天数\", \n        help_text=\"该方案的模板默认有效期天数\"\n    )\n    \n    # 其他字段保持不变\n    features = models.JSONField(default=dict, verbose_name=\"功能配置\")\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    currency = models.CharField(max_length=3, default='CNY')\n    status = models.CharField(max_length=20, default='active')\n    \n    class Meta:\n        db_table = 'licenses_license_plan'\n        verbose_name = \"许可证方案\"\n        verbose_name_plural = \"许可证方案\"\n```\n\n### License模型（保持不变）\n```python\nclass License(BaseModel):\n    \"\"\"许可证模型 - 实际使用值，无需变更\"\"\"\n    \n    license_key = models.CharField(max_length=255, unique=True)\n    plan = models.ForeignKey(LicensePlan, on_delete=models.PROTECT)\n    \n    # 实际使用字段（无变更）\n    max_activations = models.PositiveIntegerField(\n        verbose_name=\"实际最大激活数\"\n    )\n    expires_at = models.DateTimeField(verbose_name=\"实际过期时间\")\n    \n    # 其他字段保持不变\n    issued_to = models.CharField(max_length=200)\n    customer_email = models.EmailField()\n    status = models.CharField(max_length=20, default='active')\n```\n\n### 数据库迁移设计\n```python\n# 0004_rename_licenseplan_fields.py\nfrom django.db import migrations\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('licenses', '0003_previous_migration'),\n    ]\n    \n    operations = [\n        migrations.RenameField(\n            model_name='licenseplan',\n            old_name='max_machines',\n            new_name='default_max_activations',\n        ),\n        migrations.RenameField(\n            model_name='licenseplan',\n            old_name='validity_days',\n            new_name='default_validity_days',\n        ),\n    ]\n```\n\n## 🔌 API设计\n\n### API序列化器重构\n```python\nclass LicensePlanSerializer(serializers.ModelSerializer):\n    \"\"\"LicensePlan序列化器 - 支持新旧字段名兼容\"\"\"\n    \n    # 新字段名（主要使用）\n    default_max_activations = serializers.IntegerField()\n    default_validity_days = serializers.IntegerField()\n    \n    # 向后兼容字段（只读，用于过渡期）\n    max_machines = serializers.IntegerField(\n        source='default_max_activations', \n        read_only=True\n    )\n    validity_days = serializers.IntegerField(\n        source='default_validity_days',\n        read_only=True  \n    )\n    \n    class Meta:\n        model = LicensePlan\n        fields = [\n            'id', 'name', 'code', 'plan_type',\n            'default_max_activations', 'default_validity_days',\n            'max_machines', 'validity_days',  # 兼容字段\n            'features', 'price', 'currency', 'status',\n            'created_at', 'updated_at'\n        ]\n    \n    def to_representation(self, instance):\n        \"\"\"自定义响应格式，根据API版本返回对应字段\"\"\"\n        data = super().to_representation(instance)\n        \n        # 检查请求版本，决定是否包含兼容字段\n        request = self.context.get('request')\n        if request and hasattr(request, 'version'):\n            if request.version == 'v1':\n                # v1版本保留旧字段名\n                data['max_machines'] = data['default_max_activations']\n                data['validity_days'] = data['default_validity_days']\n            elif request.version == 'v2':\n                # v2版本移除旧字段名\n                data.pop('max_machines', None)\n                data.pop('validity_days', None)\n        \n        return data\n```\n\n### API端点设计\n```python\n# licenses/views/license_plan_views.py\nclass LicensePlanViewSet(viewsets.ModelViewSet):\n    \"\"\"许可证方案API视图集\"\"\"\n    \n    serializer_class = LicensePlanSerializer\n    permission_classes = [IsAuthenticated, HasLicenseManagePermission]\n    filterset_class = LicensePlanFilter\n    ordering_fields = ['name', 'created_at', 'default_max_activations']\n    \n    def get_queryset(self):\n        \"\"\"根据租户过滤数据\"\"\"\n        return LicensePlan.objects.filter(\n            tenant=self.request.tenant\n        ).select_related('tenant')\n    \n    def perform_create(self, serializer):\n        \"\"\"创建时自动设置租户\"\"\"\n        serializer.save(\n            tenant=self.request.tenant,\n            created_by=self.request.user\n        )\n```\n\n## 🔐 安全设计\n\n### 硬件指纹生成算法\n```python\nclass HardwareFingerprintService:\n    \"\"\"跨平台硬件指纹生成服务\"\"\"\n    \n    @staticmethod\n    def generate_fingerprint(hardware_info: dict) -> str:\n        \"\"\"生成统一的硬件指纹\"\"\"\n        \n        # 提取关键硬件信息\n        key_components = {\n            'hardware_uuid': hardware_info.get('hardware_uuid'),\n            'cpu_model': hardware_info.get('cpu_info', {}).get('model'),\n            'mac_addresses': sorted(hardware_info.get('network_info', {}).get('mac_addresses', [])),\n            'platform': hardware_info.get('system_info', {}).get('os_name')\n        }\n        \n        # 生成稳定的指纹\n        fingerprint_data = json.dumps(key_components, sort_keys=True)\n        fingerprint_hash = hashlib.sha256(fingerprint_data.encode()).hexdigest()\n        \n        return f\"fp_{fingerprint_hash[:32]}\"\n    \n    @staticmethod\n    def validate_fingerprint_similarity(stored_fp: str, current_fp: str) -> float:\n        \"\"\"计算指纹相似度，处理硬件微小变化\"\"\"\n        # 实现指纹相似度算法\n        # 返回0.0-1.0之间的相似度分数\n        pass\n```\n\n### RSA签名验证增强\n```python\nclass LicenseSignatureService:\n    \"\"\"许可证数字签名服务\"\"\"\n    \n    @staticmethod\n    def verify_license_signature(license_key: str, signature: str, public_key: str) -> bool:\n        \"\"\"验证许可证RSA数字签名\"\"\"\n        try:\n            # 加载RSA公钥\n            rsa_key = RSA.import_key(public_key)\n            \n            # 创建签名验证器\n            verifier = pkcs1_15.new(rsa_key)\n            \n            # 计算许可证密钥的哈希\n            license_hash = SHA256.new(license_key.encode())\n            \n            # 验证签名\n            verifier.verify(license_hash, base64.b64decode(signature))\n            return True\n            \n        except (ValueError, TypeError) as e:\n            logger.warning(f\"License signature verification failed: {e}\")\n            return False\n```\n\n## 🎨 前端设计\n\n### TypeScript类型定义\n```typescript\n// types/license.ts\nexport interface LicensePlan {\n  id: number;\n  name: string;\n  code: string;\n  plan_type: string;\n  \n  // 新字段名（主要使用）\n  default_max_activations: number;\n  default_validity_days: number;\n  \n  // 其他字段\n  features: Record<string, any>;\n  price: string;\n  currency: string;\n  status: string;\n  created_at: string;\n  updated_at: string;\n}\n\n// 向后兼容的类型定义\nexport interface LegacyLicensePlan extends LicensePlan {\n  max_machines: number;  // 映射到 default_max_activations\n  validity_days: number; // 映射到 default_validity_days\n}\n```\n\n### Vue组件设计\n```vue\n<!-- components/LicensePlan/LicensePlanForm.vue -->\n<template>\n  <el-form ref=\"formRef\" :model=\"form\" :rules=\"rules\" label-width=\"120px\">\n    <el-form-item label=\"方案名称\" prop=\"name\">\n      <el-input v-model=\"form.name\" placeholder=\"请输入方案名称\" />\n    </el-form-item>\n    \n    <el-form-item label=\"方案代码\" prop=\"code\">\n      <el-input v-model=\"form.code\" placeholder=\"请输入方案代码\" />\n    </el-form-item>\n    \n    <!-- 使用新字段名 -->\n    <el-form-item label=\"默认最大激活数\" prop=\"default_max_activations\">\n      <el-input-number \n        v-model=\"form.default_max_activations\" \n        :min=\"1\" \n        :max=\"1000\"\n        placeholder=\"设备数量限制\"\n      />\n    </el-form-item>\n    \n    <el-form-item label=\"默认有效天数\" prop=\"default_validity_days\">\n      <el-input-number \n        v-model=\"form.default_validity_days\"\n        :min=\"1\"\n        :max=\"3650\" \n        placeholder=\"有效期天数\"\n      />\n    </el-form-item>\n    \n    <el-form-item label=\"价格\" prop=\"price\">\n      <el-input v-model=\"form.price\" placeholder=\"请输入价格\">\n        <template #append>{{ form.currency }}</template>\n      </el-input>\n    </el-form-item>\n    \n    <el-form-item>\n      <el-button type=\"primary\" @click=\"handleSubmit\">保存</el-button>\n      <el-button @click=\"handleCancel\">取消</el-button>\n    </el-form-item>\n  </el-form>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, reactive } from 'vue'\nimport type { LicensePlan } from '@/types/license'\nimport { createLicensePlan, updateLicensePlan } from '@/api/license'\n\ninterface Props {\n  modelValue?: LicensePlan\n  mode: 'create' | 'edit'\n}\n\nconst props = defineProps<Props>()\nconst emit = defineEmits<{\n  submit: [plan: LicensePlan]\n  cancel: []\n}>()\n\n// 表单数据（使用新字段名）\nconst form = reactive({\n  name: '',\n  code: '',\n  plan_type: 'basic',\n  default_max_activations: 1,\n  default_validity_days: 365,\n  price: '0.00',\n  currency: 'CNY',\n  status: 'active'\n})\n\n// 表单验证规则\nconst rules = {\n  name: [\n    { required: true, message: '请输入方案名称', trigger: 'blur' }\n  ],\n  code: [\n    { required: true, message: '请输入方案代码', trigger: 'blur' }\n  ],\n  default_max_activations: [\n    { required: true, message: '请设置默认最大激活数', trigger: 'blur' }\n  ],\n  default_validity_days: [\n    { required: true, message: '请设置默认有效天数', trigger: 'blur' }\n  ]\n}\n\nconst handleSubmit = async () => {\n  try {\n    if (props.mode === 'create') {\n      const result = await createLicensePlan(form)\n      emit('submit', result)\n    } else {\n      const result = await updateLicensePlan(props.modelValue!.id, form)\n      emit('submit', result)\n    }\n  } catch (error) {\n    console.error('保存失败:', error)\n  }\n}\n</script>\n```\n\n### API调用层设计\n```typescript\n// api/license.ts\nimport { request } from '@/utils/request'\nimport type { LicensePlan } from '@/types/license'\n\nexport interface LicensePlanListResponse {\n  count: number\n  results: LicensePlan[]\n}\n\nexport interface CreateLicensePlanRequest {\n  name: string\n  code: string\n  plan_type: string\n  default_max_activations: number  // 使用新字段名\n  default_validity_days: number    // 使用新字段名\n  price: string\n  currency: string\n}\n\nexport const licensePlanAPI = {\n  // 获取方案列表\n  async getPlans(params?: any): Promise<LicensePlanListResponse> {\n    return request.get('/api/licenses/plans/', { params })\n  },\n  \n  // 创建方案\n  async createPlan(data: CreateLicensePlanRequest): Promise<LicensePlan> {\n    return request.post('/api/licenses/plans/', data)\n  },\n  \n  // 更新方案\n  async updatePlan(id: number, data: Partial<CreateLicensePlanRequest>): Promise<LicensePlan> {\n    return request.patch(`/api/licenses/plans/${id}/`, data)\n  },\n  \n  // 删除方案\n  async deletePlan(id: number): Promise<void> {\n    return request.delete(`/api/licenses/plans/${id}/`)\n  }\n}\n```\n\n## 🧪 测试设计\n\n### 单元测试设计\n```python\n# tests/test_license_plan_serializer.py\nclass TestLicensePlanSerializer(TestCase):\n    \"\"\"LicensePlan序列化器测试\"\"\"\n    \n    def setUp(self):\n        self.plan_data = {\n            'name': '测试方案',\n            'code': 'TEST',\n            'plan_type': 'basic',\n            'default_max_activations': 5,\n            'default_validity_days': 365,\n            'price': '999.00'\n        }\n    \n    def test_serializer_with_new_field_names(self):\n        \"\"\"测试新字段名序列化\"\"\"\n        serializer = LicensePlanSerializer(data=self.plan_data)\n        self.assertTrue(serializer.is_valid())\n        \n        plan = serializer.save()\n        self.assertEqual(plan.default_max_activations, 5)\n        self.assertEqual(plan.default_validity_days, 365)\n    \n    def test_backward_compatibility_fields(self):\n        \"\"\"测试向后兼容字段\"\"\"\n        plan = LicensePlan.objects.create(**self.plan_data)\n        serializer = LicensePlanSerializer(plan)\n        \n        data = serializer.data\n        # 新字段名\n        self.assertEqual(data['default_max_activations'], 5)\n        self.assertEqual(data['default_validity_days'], 365)\n        \n        # 兼容字段名（只读）\n        self.assertEqual(data['max_machines'], 5)\n        self.assertEqual(data['validity_days'], 365)\n```\n\n### 集成测试设计\n```python\n# tests/test_license_plan_api.py\nclass TestLicensePlanAPI(APITestCase):\n    \"\"\"LicensePlan API集成测试\"\"\"\n    \n    def setUp(self):\n        self.user = create_test_user()\n        self.tenant = create_test_tenant()\n        self.client.force_authenticate(user=self.user)\n        \n    def test_create_plan_with_new_fields(self):\n        \"\"\"测试使用新字段名创建方案\"\"\"\n        data = {\n            'name': '新测试方案',\n            'code': 'NEW_TEST',\n            'plan_type': 'professional',\n            'default_max_activations': 10,\n            'default_validity_days': 730,\n            'price': '1999.00'\n        }\n        \n        response = self.client.post('/api/licenses/plans/', data)\n        self.assertEqual(response.status_code, 201)\n        \n        plan = LicensePlan.objects.get(code='NEW_TEST')\n        self.assertEqual(plan.default_max_activations, 10)\n        self.assertEqual(plan.default_validity_days, 730)\n    \n    def test_api_response_format(self):\n        \"\"\"测试API响应格式包含新旧字段名\"\"\"\n        plan = LicensePlan.objects.create(\n            name='响应测试',\n            code='RESPONSE_TEST',\n            default_max_activations=3,\n            default_validity_days=180,\n            tenant=self.tenant\n        )\n        \n        response = self.client.get(f'/api/licenses/plans/{plan.id}/')\n        self.assertEqual(response.status_code, 200)\n        \n        data = response.json()\n        # 验证新字段名存在\n        self.assertIn('default_max_activations', data)\n        self.assertIn('default_validity_days', data)\n        self.assertEqual(data['default_max_activations'], 3)\n        self.assertEqual(data['default_validity_days'], 180)\n```\n\n## 📊 性能设计\n\n### 数据库查询优化\n```python\n# 优化后的查询集\nclass LicensePlanQuerySet(models.QuerySet):\n    \"\"\"优化的查询集\"\"\"\n    \n    def with_license_stats(self):\n        \"\"\"包含许可证统计信息\"\"\"\n        return self.annotate(\n            total_licenses=Count('license'),\n            active_licenses=Count('license', filter=Q(license__status='active')),\n            total_activations=Sum('license__max_activations')\n        )\n    \n    def for_tenant(self, tenant):\n        \"\"\"租户过滤\"\"\"\n        return self.filter(tenant=tenant)\n    \n    def active_plans(self):\n        \"\"\"活跃方案\"\"\"\n        return self.filter(status='active')\n\n# 使用示例\nplans = LicensePlan.objects.for_tenant(request.tenant)\\\n    .active_plans()\\\n    .with_license_stats()\\\n    .select_related('tenant')\\\n    .order_by('name')\n```\n\n### 缓存策略设计\n```python\n# 缓存配置\nCACHE_SETTINGS = {\n    'license_plan_list': {\n        'timeout': 300,  # 5分钟\n        'key_pattern': 'license_plans:tenant:{tenant_id}:list'\n    },\n    'license_plan_detail': {\n        'timeout': 600,  # 10分钟\n        'key_pattern': 'license_plan:detail:{plan_id}'\n    }\n}\n\nclass CachedLicensePlanService:\n    \"\"\"带缓存的许可证方案服务\"\"\"\n    \n    @staticmethod\n    def get_plans_for_tenant(tenant_id: int) -> List[LicensePlan]:\n        cache_key = f'license_plans:tenant:{tenant_id}:list'\n        \n        plans = cache.get(cache_key)\n        if plans is None:\n            plans = list(LicensePlan.objects.for_tenant_id(tenant_id).active_plans())\n            cache.set(cache_key, plans, timeout=300)\n        \n        return plans\n```\n\n## 🔄 部署设计\n\n### 数据库迁移策略\n```python\n# 迁移执行计划\nMIGRATION_PLAN = {\n    'phase_1': {\n        'description': '执行字段重命名迁移',\n        'migrations': ['0004_rename_licenseplan_fields'],\n        'rollback_safe': True,\n        'estimated_time': '< 1分钟'\n    },\n    'phase_2': {\n        'description': '验证数据完整性',\n        'commands': ['python manage.py check_license_data_integrity'],\n        'rollback_safe': True,\n        'estimated_time': '< 30秒'\n    }\n}\n```\n\n### 部署脚本设计\n```bash\n#!/bin/bash\n# deploy_license_update.sh\n\nset -e\n\necho \"开始部署许可证系统更新...\"\n\n# 1. 备份数据库\necho \"1. 备份数据库...\"\npython manage.py dbbackup\n\n# 2. 执行数据库迁移\necho \"2. 执行数据库迁移...\"\npython manage.py migrate licenses\n\n# 3. 验证数据完整性\necho \"3. 验证数据完整性...\"\npython manage.py check_license_data_integrity\n\n# 4. 重启服务\necho \"4. 重启应用服务...\"\nsudo systemctl restart gunicorn\nsudo systemctl restart celery\n\n# 5. 验证服务状态\necho \"5. 验证服务状态...\"\npython manage.py health_check\n\necho \"部署完成！\"\n```\n\n## 📝 监控设计\n\n### 关键指标监控\n```python\n# 监控指标定义\nMONITORING_METRICS = {\n    'api_performance': {\n        'license_plan_list_response_time': 'histogram',\n        'license_plan_create_response_time': 'histogram',\n        'license_plan_update_response_time': 'histogram'\n    },\n    'business_metrics': {\n        'license_plans_created_daily': 'counter',\n        'license_plans_updated_daily': 'counter',\n        'api_field_compatibility_usage': 'counter'\n    },\n    'error_metrics': {\n        'license_plan_api_errors': 'counter',\n        'database_migration_errors': 'counter',\n        'field_validation_errors': 'counter'\n    }\n}\n```\n\n## ✅ 设计验证\n\n### 设计原则验证\n- ✅ **向后兼容性**: API支持新旧字段名，平滑过渡\n- ✅ **数据完整性**: 迁移过程保证数据不丢失\n- ✅ **性能保障**: 优化查询和缓存策略\n- ✅ **安全增强**: RSA签名和硬件指纹验证\n- ✅ **用户体验**: 前端界面保持一致性\n\n### 技术债务评估\n- **低风险**: 字段重命名对现有功能影响最小\n- **中风险**: 前端组件需要系统性更新\n- **可控风险**: 通过分阶段部署降低风险\n\n---\n\n*设计文档版本: v1.0*  \n*创建日期: 2025年9月26日*  \n*基于需求: license-system-update requirements v1.0*\n",
  "fileStats": {
    "size": 20881,
    "lines": 717,
    "lastModified": "2025-09-26T07:14:39.043Z"
  },
  "comments": []
}